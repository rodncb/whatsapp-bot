const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode-terminal");
require("dotenv").config();

const ArceeAIAgent = require("./ai-agent");
const MessageHandler = require("./message-handler");
const audioHandler = require("./audio-handler");
const conversationMemory = require("./conversation-memory");

// Configura√ß√µes
const OWNER_PHONE = process.env.OWNER_PHONE || "552299871594"; // Ana Cl√°udia
const BOT_NAME = process.env.BOT_NAME || "Ana Cl√°udia";

// Verifica se suporte a √°udio est√° habilitado
const AUDIO_ENABLED = audioHandler.isAudioEnabled();
if (AUDIO_ENABLED) {
  console.log("üé§ Suporte a √ÅUDIO HABILITADO (OpenAI Whisper)");
} else {
  console.log(
    "üìù Modo TEXTO apenas (configure OPENAI_API_KEY para habilitar √°udio)"
  );
}

console.log("\n‚ö†Ô∏è  BOT DE PRODU√á√ÉO - Ana Cl√°udia");
console.log("üì± N√∫mero: +55 22 99871-5947");
console.log("üéØ Modo: Conversa√ß√£o humanizada (Arcee.ai)");
console.log("‚ùå SEM respostas autom√°ticas - Tudo via IA\n");

// Inicializa componentes
const aiAgent = new ArceeAIAgent();
const messageHandler = new MessageHandler(aiAgent);

// Configura√ß√£o do cliente WhatsApp
const client = new Client({
  authStrategy: new LocalAuth({
    dataPath: "./.wwebjs_auth",
  }),
  puppeteer: {
    headless: true,
    executablePath:
      "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
    args: [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-dev-shm-usage",
      "--disable-accelerated-2d-canvas",
      "--no-first-run",
      "--no-zygote",
      "--disable-gpu",
    ],
  },
});

// Eventos do WhatsApp
client.on("qr", (qr) => {
  console.log("\nüîê ESCANEIE O QR CODE ABAIXO COM O WHATSAPP:\n");
  qrcode.generate(qr, { small: true });
  console.log(
    "\nüì± Abra o WhatsApp ‚Üí Aparelhos Conectados ‚Üí Conectar Aparelho\n"
  );
});

client.on("ready", () => {
  console.log("\n‚úÖ Bot conectado com sucesso!");
  console.log(`ü§ñ ${BOT_NAME} est√° online e pronto para atender!`);
  console.log("üìä Aguardando mensagens...\n");
  console.log("=".repeat(50));

  // Limpa conversas antigas a cada 24h
  setInterval(() => {
    messageHandler.cleanOldConversations();
  }, 24 * 60 * 60 * 1000);
});

client.on("authenticated", () => {
  console.log("üîì Autentica√ß√£o realizada com sucesso!");
});

client.on("auth_failure", (msg) => {
  console.error("‚ùå Falha na autentica√ß√£o:", msg);
  console.log("üí° Tente deletar a pasta .wwebjs_auth e reconectar");
});

client.on("disconnected", (reason) => {
  console.log("‚ö†Ô∏è  Bot desconectado:", reason);
  console.log("üîÑ Tentando reconectar...");
});

// Processa mensagens recebidas
client.on("message", async (msg) => {
  try {
    // Ignora mensagens de grupos e status
    if (msg.from.includes("@g.us") || msg.from === "status@broadcast") {
      return;
    }

    // Ignora mensagens pr√≥prias
    if (msg.fromMe) {
      return;
    }

    const chatId = msg.from;
    const contact = await msg.getContact();
    const contactName = contact.pushname || contact.name || chatId;

    // ========================================
    // DETECTA LEAD DO FACEBOOK
    // ========================================
    const isAdLead = conversationMemory.isFromFacebookAd(msg.body);
    const leadSource = isAdLead ? "facebook_ad" : "direct";

    console.log("\n" + "=".repeat(50));

    if (isAdLead) {
      console.log(`üéØ [LEAD AN√öNCIO FB] Novo lead detectado!`);
      console.log(`ÔøΩ Regi√£o: Campos dos Goytacazes/RJ`);
      console.log(`üí¨ Origem: An√∫ncio Facebook`);
    }

    console.log(`ÔøΩüì© Mensagem de: ${contactName}`);
    console.log(`üì± N√∫mero: ${chatId}`);
    console.log(`üìù Tipo: ${msg.type}`);
    console.log(`‚è∞ Hor√°rio: ${new Date().toLocaleString("pt-BR")}`);

    // ========================================
    // SALVA MENSAGEM DO CLIENTE NO BD
    // ========================================
    const messageContent = msg.body || `[${msg.type}]`;
    conversationMemory.saveMessage(
      chatId,
      contactName,
      msg.type,
      messageContent,
      false, // n√£o √© do bot
      msg.timestamp,
      {
        leadSource,
        isAdLead,
      }
    );

    // ========================================
    // PROCESSA √ÅUDIO (se habilitado)
    // ========================================
    if (msg.type === "ptt" || msg.type === "audio") {
      console.log("üé§ √Åudio recebido");

      if (AUDIO_ENABLED) {
        // √ÅUDIO HABILITADO: Transcreve com OpenAI Whisper
        try {
          console.log("üîÑ Transcrevendo √°udio com OpenAI Whisper...");

          const chat = await msg.getChat();
          await chat.sendStateTyping();

          // Transcreve o √°udio
          const transcription = await audioHandler.processWhatsAppAudio(msg);

          console.log(`üí¨ Transcri√ß√£o: ${transcription}`);
          console.log(`üïê Hor√°rio: ${new Date().toLocaleString("pt-BR")}`);

          // Salva transcri√ß√£o no BD
          conversationMemory.saveMessage(
            chatId,
            contactName,
            "audio_transcribed",
            transcription,
            false, // √© do cliente (transcri√ß√£o)
            msg.timestamp
          );

          // Busca contexto da conversa anterior
          const context = conversationMemory.getContextForAI(chatId, 10);

          // Processa como texto normal com Arcee.ai
          await chat.sendStateTyping();
          const response = await messageHandler.handleMessage(
            chatId,
            transcription,
            context
          );

          // Simula tempo de digita√ß√£o
          const typingTime = Math.random() * 2000 + 1000;
          await new Promise((resolve) => setTimeout(resolve, typingTime));

          await msg.reply(response.reply);
          console.log(
            `ü§ñ Resposta enviada: ${response.reply.substring(0, 100)}...`
          );

          // Salva resposta do bot no BD
          conversationMemory.saveMessage(
            chatId,
            BOT_NAME,
            "text",
            response.reply,
            true, // √© do bot
            Date.now() / 1000
          );

          // Notifica o dono se necess√°rio
          if (response.shouldNotifyOwner) {
            await notifyOwner(response.reason, response.contactInfo, chatId);
          }
        } catch (audioError) {
          console.error("‚ùå Erro ao processar √°udio:", audioError.message);
          await msg.reply(
            "Desculpe, tive um probleminha ao processar seu √°udio. Pode digitar sua mensagem? üòä"
          );
        }
      } else {
        // √ÅUDIO DESABILITADO: Pede para enviar texto
        console.log("‚ö†Ô∏è  √Åudio n√£o habilitado, pedindo texto");
        await msg.reply(`Oi! üòä 

Recebi seu √°udio, mas para te atender melhor, voc√™ pode digitar sua mensagem? 

Assim consigo te responder mais r√°pido! üìù`);
      }

      console.log("=".repeat(50) + "\n");
      return;
    }

    // ========================================
    // PROCESSA TEXTO (Arcee.ai)
    // ========================================
    console.log(`üí¨ Conte√∫do: ${msg.body}`);
    console.log(`üïê Hor√°rio: ${new Date().toLocaleString("pt-BR")}`);

    // Busca contexto da conversa anterior
    const context = conversationMemory.getContextForAI(chatId, 10);

    // Indicador de digita√ß√£o
    const chat = await msg.getChat();
    await chat.sendStateTyping();

    // Processa mensagem com IA
    const response = await messageHandler.handleMessage(
      chatId,
      msg.body,
      context
    );

    // Simula tempo de digita√ß√£o humano (1-3 segundos)
    const typingTime = Math.random() * 2000 + 1000;
    await new Promise((resolve) => setTimeout(resolve, typingTime));

    // Envia resposta
    await msg.reply(response.reply);
    console.log(`ü§ñ Resposta enviada: ${response.reply.substring(0, 100)}...`);

    // Salva resposta do bot no BD
    conversationMemory.saveMessage(
      chatId,
      BOT_NAME,
      "text",
      response.reply,
      true, // √© do bot
      Date.now() / 1000
    );

    // Notifica o dono se necess√°rio
    if (response.shouldNotifyOwner) {
      await notifyOwner(response.reason, response.contactInfo, chatId);
    }

    console.log("=".repeat(50) + "\n");
  } catch (error) {
    console.error("‚ùå Erro ao processar mensagem:", error);

    try {
      await msg.reply(
        "Desculpe, tive um probleminha aqui. Pode repetir sua mensagem? üòä"
      );
    } catch (replyError) {
      console.error("‚ùå Erro ao enviar mensagem de erro:", replyError);
    }
  }
});

/**
 * Notifica o dono quando um lead importante chega
 */
async function notifyOwner(reason, contactInfo, chatId) {
  try {
    const ownerNumber = OWNER_PHONE.includes("@c.us")
      ? OWNER_PHONE
      : `${OWNER_PHONE}@c.us`;

    const message = `üö® *ALERTA - LEAD QUENTE!*

${reason}

üìã *Informa√ß√µes do Cliente:*
üë§ Nome: ${contactInfo.name}
üíº Trabalho: ${contactInfo.workType}
üí∞ Renda: ${contactInfo.income}
üéÇ Idade: ${contactInfo.age}
üì® Mensagens trocadas: ${contactInfo.messagesCount}
üïê Iniciou em: ${contactInfo.startedAt.toLocaleString("pt-BR")}

‚ö° *ENTRE EM CONTATO AGORA!*
Chat ID: ${chatId}`;

    await client.sendMessage(ownerNumber, message);
    console.log("üì¢ Notifica√ß√£o enviada ao dono!");
  } catch (error) {
    console.error("‚ùå Erro ao notificar dono:", error);
  }
}

// Tratamento de erros globais
process.on("unhandledRejection", (reason, promise) => {
  console.error("‚ùå Unhandled Rejection:", reason);
});

process.on("uncaughtException", (error) => {
  console.error("‚ùå Uncaught Exception:", error);
  // N√£o encerra o processo, tenta manter o bot rodando
});

// Graceful shutdown
process.on("SIGINT", async () => {
  console.log("\n\n‚ö†Ô∏è  Encerrando bot...");
  await client.destroy();
  console.log("‚úÖ Bot encerrado com sucesso!");
  process.exit(0);
});

// Inicia o bot
console.log("üöÄ Iniciando WhatsBot com IA...");
console.log(`ü§ñ Nome: ${BOT_NAME}`);
console.log(`üè¢ Empresa: ${process.env.COMPANY_NAME}`);
console.log("\n‚è≥ Aguardando QR Code...\n");

client.initialize();
