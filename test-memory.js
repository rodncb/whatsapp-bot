// Exemplo de uso do sistema de mem√≥ria de conversas
const conversationMemory = require("./src/conversation-memory");

console.log("\nüß™ TESTANDO SISTEMA DE MEM√ìRIA\n");
console.log("=".repeat(50));

// Simula conversa Dia 1
console.log("\nüìÖ DIA 1 - Primeira conversa");
console.log("-".repeat(50));

const clientPhone = "5521999887766@c.us";
const clientName = "Jo√£o Silva";

// Cliente manda mensagem
conversationMemory.saveMessage(
  clientPhone,
  clientName,
  "text",
  "Ol√°, quanto custa o apartamento pr√≥ximo ao Alphaville?",
  false,
  Date.now() / 1000
);

// Bot responde
conversationMemory.saveMessage(
  clientPhone,
  "Ana Cl√°udia",
  "text",
  "Oi Jo√£o! Temos uma excelente op√ß√£o por R$ 222 mil. Quer mais detalhes?",
  true,
  Date.now() / 1000 + 5
);

// Cliente responde
conversationMemory.saveMessage(
  clientPhone,
  clientName,
  "text",
  "Sim! Aceita financiamento?",
  false,
  Date.now() / 1000 + 10
);

// Bot responde
conversationMemory.saveMessage(
  clientPhone,
  "Ana Cl√°udia",
  "text",
  "Sim! Aceitamos financiamento banc√°rio e FGTS. Qual sua faixa de entrada?",
  true,
  Date.now() / 1000 + 15
);

console.log("‚úÖ 4 mensagens salvas (Dia 1)");

// Simula Dia 2 - Cliente retorna
console.log("\nüìÖ DIA 2 - Cliente retorna");
console.log("-".repeat(50));

// BUSCA CONTEXTO antes de responder
const context = conversationMemory.getContextForAI(clientPhone, 10);
console.log("\nüí° CONTEXTO RECUPERADO:\n");
console.log(context);

// Cliente manda nova mensagem
conversationMemory.saveMessage(
  clientPhone,
  clientName,
  "text",
  "Oi! Posso visitar amanh√£?",
  false,
  Date.now() / 1000 + 86400 // +1 dia
);

console.log("\n‚úÖ Nova mensagem salva (Dia 2)");

// Mostra info do contato
console.log("\nüìä INFORMA√á√ïES DO CONTATO:");
console.log("-".repeat(50));
const info = conversationMemory.getContactInfo(clientPhone);
console.log(info);

// Marca como qualificado
console.log("\n‚úÖ QUALIFICANDO LEAD...");
conversationMemory.markAsQualified(clientPhone, {
  budget: 250000,
  financing: true,
  urgency: "medium",
  property_interest: "Alphaville R$222k",
});

// Adiciona nota
conversationMemory.addNote(
  clientPhone,
  "Cliente interessado! Quer visitar amanh√£. Lembrar de ligar."
);

console.log("‚úÖ Lead qualificado e nota adicionada");

// Estat√≠sticas gerais
console.log("\nüìà ESTAT√çSTICAS GERAIS:");
console.log("-".repeat(50));
const stats = conversationMemory.getStats();
console.log(stats);

// Lista contatos
console.log("\nüë• LISTA DE CONTATOS:");
console.log("-".repeat(50));
const contacts = conversationMemory.listContacts(10);
contacts.forEach((c) => {
  console.log(`üì± ${c.name || "Sem nome"} - ${c.phone_number}`);
  console.log(
    `   Mensagens: ${c.total_messages} | Qualificado: ${
      c.is_qualified ? "Sim" : "N√£o"
    }`
  );
  console.log(`   √öltimo contato: ${c.last_contact}`);
  console.log("");
});

console.log("=".repeat(50));
console.log("\n‚úÖ TESTE CONCLU√çDO!\n");
console.log("Banco de dados criado em: data/conversations.db");
console.log("Use um visualizador SQLite para ver os dados.\n");
